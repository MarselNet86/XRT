from aiogram import F, Router
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from bot.database.methods.update import change_user_email, changer_role
from bot.database.methods.insert import add_new_user

from bot.keyboards.user.reply import *

from bot.misc.const import AVAILABLE_ROLES

from .fsm_states import Form


router = Router()


# –≠—Ç–∞–ø –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –§–ò–û #

async def start_user_register(message: Message, state: FSMContext) -> None:
    await message.answer(
        text="<b>–ü—Ä–∏–≤–µ—Ç!üëã</b>\n\n"
             "–ü—Ä–µ–∂–¥–µ, —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º, –º–Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –≤—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
             "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(Form.taking_full_name)


# –≠—Ç–∞–ø –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ #

@router.message(Form.taking_full_name, F.text.len() >= 15)
async def fullname_taken(message: Message, state: FSMContext):
    await state.update_data(
        user_id=message.from_user.id,
        nickname=message.from_user.username,
        full_name=message.text.title()
    )
    await message.answer(
        text="–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
        reply_markup=get_roles()
    )

    await state.set_state(Form.choosing_role)


@router.message(Form.taking_full_name)
async def fullname_incorrectly(message: Message):
    await message.answer(
        "<b>‚ùå–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û</b>\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑!"
    )


# –≠—Ç–∞–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #

@router.message(Form.choosing_role, F.text.in_(list(AVAILABLE_ROLES.keys())))
async def fullname_and_role_taken(message: Message, state: FSMContext):
    await state.update_data(role=AVAILABLE_ROLES[message.text])
    if message.text == '–î–∏—Å–ø–µ—Ç—á–µ—Ä':
        await message.answer(
            text="üì•–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å <b>—Ä–∞–±–æ—á–µ–π</b> —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã\n\n"
                 "ü§ñ–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∞–¥—Ä–µ—Å –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ "
                 "–∏ –≤ —Å–ª—É—á–∞–µ –Ω–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏, –≤—ã–¥–∞—Å—Ç –æ—à–∏–±–∫—É\n\n"
                 "<i>–ü—Ä–∏–º–µ—Ä: example@rt.ru</i>",
            reply_markup=ReplyKeyboardRemove()
        )

        await state.set_state(Form.taking_email)

    elif message.text == '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å':
        await message.answer(
            text="üì≤–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –ê–†–ì–£–°\n\n"
                 "<i>–ü—Ä–∏–º–µ—Ä: HM_BEDILO-OV</i>",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Form.taking_argus)


@router.message(Form.choosing_role)
async def role_incorrectly(message: Message):
    await message.answer(
        text="<b>‚ùå–¢–∞–∫–æ–π —Ä–æ–ª–∏ –µ—â–µ –Ω–µ—Ç</b>\n\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=get_roles()
    )


async def save_user_data(message: Message, user_data):
    if user_data.get('change_role'):
        await changer_role(
            change_role=user_data['change_role'],
            user_id=message.from_user.id,
            login=user_data.get('login'),
            plots=user_data.get('plots'),
            email=user_data.get('email')
        )

        await message.answer(
            text="ü§ù–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã",
            reply_markup=main_menu()
        )

    elif user_data.get('change_email'):
        await change_user_email(message.from_user.id, user_data['email'])
        await message.answer(
            text="üì¨–ü–æ—á—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞",
            reply_markup=main_menu()
        )

    else:
        await add_new_user(
            user_id=user_data['user_id'],
            nickname=user_data['nickname'],
            full_name=user_data['full_name'],
            fk_role=user_data['role'],
            login=user_data.get('login'),
            email=user_data.get('email'),
            plots=user_data.get('plots')
        )

        await message.answer(
            text="‚úÖ–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            reply_markup=main_menu()
        )
