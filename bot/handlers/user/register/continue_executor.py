from aiogram import F, Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from .main_register import save_user_data
from .fsm_states import Form


router = Router()


# –≠—Ç–∞–ø –æ—Ç–ø—Ä–∞–≤–∫–∏ –ê–†–ì–£–°–ê #

@router.message(Form.taking_argus, F.text.contains('_'))
async def argus_taken(message: Message, state: FSMContext) -> None:
    await state.update_data(login=message.text.upper())
    await message.answer(
        "üèò–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ —É—á–∞—Å—Ç–∫–∏\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä:\n"
        "–•–¢_–ò–ù–°–¢. + 3 –õ–¢–ü_–ù–µ—Ñ—Ç–µ—é–≥–∞–Ω—Å–∫\n"
        "–£–¢–£_–ü–æ–π–∫–æ–≤—Å–∫–∏–π</i>"
    )

    await state.set_state(Form.taking_plots)


@router.message(Form.taking_argus)
async def argus_incorrectly(message: Message) -> None:
    await message.answer(
        "<b>‚ùå–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ê–†–ì–£–°</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑!",
    )


@router.message(Form.taking_plots, F.text.contains('_'))
async def plots_taken(message: Message, state: FSMContext) -> None:
    input_lines = set(message.text.strip().split('\n'))
    await state.update_data(plots=input_lines)
    user_data = await state.get_data()

    await save_user_data(message, user_data)
    await state.clear()


@router.message(Form.taking_plots)
async def plots_incorrectly(message: Message) -> None:
    await message.answer(
        "<b>‚ùå–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ —É—á–∞—Å—Ç–∫–æ–≤!</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑!",
    )
