from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hide_link

from bot.database.methods.get import dispatcher_exists, get_user_mail, get_user_role
from bot.database.methods.update import latest_activity

from bot.handlers.user.utils import deadline_message
from bot.handlers.user.register.fsm_states import Form

from bot.keyboards.user.reply import *
from bot.keyboards.user.inline import *


router = Router()

# –í—ã–≤–æ–¥ —Ñ—É–Ω–∫—Ü–∏–π –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #


@router.message(F.text == 'üíª–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
async def settings(message: Message):
    is_dispatcher = await dispatcher_exists(message.from_user.id)
    await message.answer(
        text=f"{hide_link('https://telegra.ph/file/2e8bf0a6bd744d44231bc.png')}"
             "–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ, –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –Ω–∞ –Ω–æ–≤—ã–π, "
             "<i>(–µ—Å–ª–∏ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º)</i> "
             "–∞ —Ç–∞–∫–∂–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üì≤\n\n"
             "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∏–∂–µ, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å üëá",
        reply_markup=settings_menu(is_dispatcher))

    await latest_activity(message.from_user.id)


@router.message(F.text == 'üèò–£—á–∞—Å—Ç–∫–∏')
async def plots(message: Message):
    await message.answer("<i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–µ–∂–∏–º–µ –∞–ø—Ä–æ–±–∞—Ü–∏–∏...</i>‚è∞")


# –í—ã–≤–æ–¥ –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –µ–µ –∏–∑–º–µ–Ω–∏—Ç—å #


@router.message(F.text == 'üì¨–ü–æ—á—Ç–∞')
async def user_email(message: Message):
    is_dispatcher = await dispatcher_exists(message.from_user.id)
    if is_dispatcher is True:
        user_mail = await get_user_mail(message.from_user.id)
        await message.answer(text=f"–í–∞—à –∞–¥—Ä–µ—Å —Å–µ–π—á–∞—Å: {user_mail}\n\n"
                                  "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –Ω–∞ –Ω–æ–≤—ã–π, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                             reply_markup=btn_change_email())


@router.callback_query(F.data == 'change_email')
async def change_email(call: CallbackQuery, state: FSMContext):
    user_mail = await get_user_mail(call.from_user.id)
    await state.update_data(change_email=True, old_email=user_mail)
    if await deadline_message(call) is False:
        await call.message.edit_text(
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —ç–ª.–ø–æ—á—Ç—ã:'
        )

        await state.set_state(Form.taking_email)

# –í—ã–≤–æ–¥ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –µ–µ –∏–∑–º–µ–Ω–∏—Ç—å #


@router.message(F.text == 'üé©–†–æ–ª—å')
async def user_role(message: Message):
    role = await get_user_role(message.from_user.id)

    if role == '–î–∏—Å–ø–µ—Ç—á–µ—Ä':
        await message.answer(
            text=f"üë®‚Äçüíª–í–∞—à–∞ —Ä–æ–ª—å —Å–µ–π—á–∞—Å: <b>{role}</b>\n\n"
                 "–í—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –Ω–∞ <i><b>\"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å\"</b></i>, "
                 "–Ω–æ –≤–∞–º –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ—á—Ç–µ!",
            reply_markup=btn_change_role(role)
        )

    elif role == '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å':
        await message.answer(
            text=f"üë®‚Äçüíª–í–∞—à–∞ —Ä–æ–ª—å —Å–µ–π—á–∞—Å: {role}\n\n"
                 "–í—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –Ω–∞ <i><b>\"–î–∏—Å–ø–µ—Ç—á–µ—Ä\"</b></i>, "
                 "—Ç–æ–≥–¥–∞ –≤–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ—á—Ç–µ",
            reply_markup=btn_change_role(role)
        )


@router.callback_query(F.data == 'change_dispatcher_to_executor')
async def change_to_executor(call: CallbackQuery, state: FSMContext):
    await state.update_data(change_role='to_executor')
    if await deadline_message(call) is False:
        await call.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ê–†–ì–£–°:",
            )

        await state.set_state(Form.taking_argus)


@router.callback_query(F.data == 'change_executor_to_dispatcher')
async def change_to_dispatcher(call: CallbackQuery, state: FSMContext):
    await state.update_data(change_role='to_dispatcher')
    if await deadline_message(call) is False:
        await call.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª.–ø–æ—á—Ç—ã:",
        )

        await state.set_state(Form.taking_email)


@router.message(F.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥')
async def back_to_main(message: Message):
    await message.answer(
        text="–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
        reply_markup=main_menu()
    )
