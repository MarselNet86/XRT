import asyncio
from datetime import datetime, timedelta, timezone
from os import getenv
import requests

from aiogram.types import CallbackQuery

from bot.database.methods.get import get_notifications_info

from bot.app.array_filter import new_lines
from bot.app.sender import send_notification_mail


async def deadline_message(call: CallbackQuery) -> bool:
    current_time = datetime.now(timezone.utc)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    message_time = call.message.date.replace(tzinfo=timezone.utc)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC
    time_difference = current_time - message_time

    if time_difference > timedelta(minutes=1):
        await call.answer(
            text="üóë–ö–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!",
            show_alert=True
        )
        return True
    return False


async def generate_message_text(line):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""

    if line['MESSAGE_TYPE'] == 'new_request':
        caption = "<b>‚úàÔ∏è–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n\n</b>"
    elif line['MESSAGE_TYPE'] == 'request_change':
        caption = "<b>üóø–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∑–∞—è–≤–∫–µ</b>\n\n"
    else:
        caption = "<b>üåµ–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª</b>\n\n"

    fields = ""
    fields += (
        f"üè†<i>–£—á–∞—Å—Ç–æ–∫:</i> <b>{line['WORKSITE_SHORT_NAME']}</b><br>\n"
        f" ‚îú‚Äì üèù<i>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</i> <b>{line['CRM']}</b><br>\n"
        f" ‚Äç‚îú‚Äì üèÉ‚Äç‚ôÇÔ∏è<i>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</i> <b>{line['ASSIGNEE_NAME']}</b><br>\n"
        f" ‚îú‚Äì ‚è∞<i>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</i> <b>{line['CREATE_KI']}</b><br>\n"
        f" ‚îú‚Äì üèÄ<i>–ö–° 3 –õ–¢–ü:</i> <b>{line['KS_3']}</b><br>\n"
        f" ‚îú‚Äì üéæ<i>–ö–° 2+3:</i> <b>{line['KS_23']}</b><br>\n"
        f" ‚îú‚Äì üé±<i>–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–π:</i> <b>{line['INTERVAL']}</b><br>\n"
    )

    if line['STATUS'] == 1:
        fields += " ‚îî‚Äì ‚úÖ<i>–°—Ç–∞—Ç—É—Å:</i> <u>–ù–æ—Ä–º–∞–ª—å–Ω–æ</u>"
    elif line['STATUS'] == 2:
        fields += " ‚îî‚Äì üåÑ<i>–°—Ç–∞—Ç—É—Å:</i> <u>–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª</u>"
    elif line['STATUS'] == 3:
        fields += " ‚îî‚Äì üì≤<i>–°—Ç–∞—Ç—É—Å:</i> <u>–ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</u>"

    return caption, fields


async def sender_notice() -> None:
    while True:
        try:
            await asyncio.sleep(60)
            line = await new_lines()
            if line and getenv('SEND_NOTIFICATION') == 'ON':
                caption, message = await generate_message_text(line)
                notifications = await get_notifications_info()
                modes = [dict(notice) for notice in notifications]

                for mode in modes:
                    if mode['bot_all']:
                        if line['MESSAGE_TYPE'] == 'new_request':  # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await send_request(int(mode['fk_user_id']), caption + message.replace('<br>', ''))

                    if mode['email_all']:
                        if line['MESSAGE_TYPE'] == 'new_request':  # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            if mode['email']:
                                send_notification_mail(mode['email'], caption, message)

                    if mode['bot_new_request']:
                        if line['MESSAGE_TYPE'] == 'new_request':  # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            await send_request(int(mode['fk_user_id']), caption + message.replace('<br>', ''))

                    if mode['email_new_request']:
                        if line['MESSAGE_TYPE'] == 'new_request':  # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            if mode['email']:
                                send_notification_mail(mode['email'], caption, message)

                    if mode['bot_request_change']:
                        if line['MESSAGE_TYPE'] == 'request_change':  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                            await send_request(int(mode['fk_user_id']), caption + message.replace('<br>', ''))

                    if mode['email_request_change']:
                        if line['MESSAGE_TYPE'] == 'request_change':  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                            if mode['email']:
                                send_notification_mail(mode['email'], caption, message)

                    if mode['bot_change_interval']:
                        if line['MESSAGE_TYPE'] == 'change_interval':  # –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª
                            await send_request(int(mode['fk_user_id']), caption + message.replace('<br>', ''))

                    if mode['email_change_interval']:
                        if line['MESSAGE_TYPE'] == 'change_interval':  # –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª
                            if mode['email']:
                                send_notification_mail(mode['email'], caption, message)

        except ValueError as ex_:
            print(f'Decoding JSON has failed: {ex_}')
        except asyncio.TimeoutError:
            print('Operation timed out, will retry...')
        except Exception as ex:
            print(f'An unexpected error occurred: {ex}')


async def send_request(user_id: int, text: str) -> None:
    response = requests.post(
        f"https://api.telegram.org/bot{getenv('TOKEN_API')}/sendMessage?chat_id={user_id}&parse_mode=html&text={text}"
    )

    print(response.text)
